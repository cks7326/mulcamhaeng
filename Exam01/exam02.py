# 개발자의 실수
# 실수를 막는 방법 - 범위
# 코드를 작성하다가 규칙이 문법,예약어 등의 실수를 막아주는 것은 도구의 도움을 받는다.
# 논리적인 문제로 결과 값이 이상하게 나오는 것은 디버깅/디버그를 합니다.
# 논리적인 실수는 제어문 또는 반복문에서 많이 나옴
# 실행 중에 문제가 발생할 경우 처리하는 것 => 예외처리
# 만에 하나 일어날까 말까한 상황을 대비하는 것 => 보험
# 예외 처리를 무분별하게 사용하게 되면 코드의 가독성이 좋지 않음

# Python 에선 기본 데이터 타입이 있음
# 1. int 정수형 데이터 타입 10진수,16진수,8진수
# 2. float 실수형(소숫점)
# 3. bool 참/거짓
# 4. None null 값을 표현
# 정적언어에서 숫자들을 저장할 때 선언하고 데이터를 정하지 않으면 문제가 발생함
# 정적언어에서 문자열 같은 객체타입을 저장할 때에는 Null 값을 허용함

data1 = 100 # 정수형 데이터를 저장
data2 = 10.99 # 실수형 데이터를 저장
data3 = True # True / False => 앞에는 대문자 한다
data4 = None # Null 값
data5 = int(10.99) # 형변환을 한다. : Python에서 기본 데이터 형식을 무시하고 강제로 지정해서 저장함
# 질문 : 소숫점을 버리고 저장됨 - 이때 반올림?
data6 = int(1000) # 형식을 지정하고 저장하는 방식 : 리터럴 데이터
# 프로그램을 할 때 수학은 필수와 같음 - 사칙연산
# 돈을 처리하기 위해서 소숫점 자릿수를 더 많이 사용해야 한다면 저장할 때 다른 형식으로 지정해서 소숫점으로 저장함

data9 = 10+11j
data9.real # 10
data9.imag # 11

