패키지 - 모듈의 묶음
모듈이 너무 많기 때문에 이를 그룹핑해서 관리하는 방법
패키지 - 폴더(디렉터리) 생성 후 Python 파일을 만들어서 관리

해당 디렉터리에  __init__.py 파일의 생성 - 특수 목적 파일
Python 3.3 이상 버전에서는 생성하지 않아도 자동 생성 된다.
 : __init__ 파일에는 패키지 정보, 모듈 정보들을 확인 할 수 있도록 해야 함
    __all__ 내장 변수에 모듈 이름을 적용


-----------------------------------------------
객체지향 프로그래밍(OOP) = API묶음 -> Framgework -> Framework + 개발도구 = 플랫폼
 : 필요한 기능을 많이 만들어 놓고 그것을 관리하는 단위(클래스)로 묶어서 관리하고
   필요할 때 마다 호출해서 사용
   필요한 기능 - 함수 -> Python에서는 메서드로 불릴 때가 있음
   기능이 많기 때문에 이를 묶어서 관리하는 단위 : 클래스
   메서드는 클래스 안에서 정의(코딩)한 함수
   메서드 : 속성과 행위(기능)을 표현하는 논리적 단위

   클래스 안에서 함수 쓰면 메서드, 밖에서 쓰면 함수
   클래스 = 메서드, 속성, 클래스 변수, 인스턴스 변수, 생성자(초기자), 소멸자
            함수(메서드,생성자,소멸자), 변수(클래스, 인스턴스, 속성)
    클래스는 - 모듈 단위로 구분하는 것을 권장
    패키지 - 클래스(모듈) - 함수,변수
    객체 -> 패키지 안에 있는 클래스에 함수와 변수를 사용하기 위해서 선언한 변수
     : 나만의 데이터 타입(클래스로 묶어서 관리 -> 클래스도 너무 많아서 패키지로 관리)을 만든 다음
       필요할 때 호출하는 방식

    상속은 소스코드 건드리지 않고 클래스 추가
    정보은닉은 필요한 함수만 접근할 수 있도록 하는 것
