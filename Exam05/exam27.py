# 자료구조 : List(리스트)
# 수학 - 1차원 배열과 연관
# 1차원 배열 - 1층 짜리 복도식 아파트(수학 = 행)
# 2차원 배열 - n층 복도식 아파트(수학= 행, 열)
#   3층 복도식 아파트 / 5층 복도식 아파트
# 3차원 배열 - n층 복도식 아파트 단지( 수학 = 행,열,면)
# 4차원 배열 - n층 복도식 아파트 단지를 구성한 신도시( 수학 = 행,열,면,공간)
# 프로그래밍 할 때 교육 - n차원 배열 지원 ( 200차원)
# 실무는 최대 3차원까지만 사용
# 권장은 최대 2차원까지만 하고 어쩔 수 없을 때 3차원
# 3차원을 할 때에는 관계형 데이터베이스와 연동할 때에는 할 수도 있다.
# 관계형 데이터베이스 = 행,열,면 : 면 대 면 끼리 관계를 가진다 열을 기준으로 관계를 가짐
# - 2차원 배열까지 처리해서 결과를 1차원 배열이나 List 구조에 저장
# 데이터 형식을 저장할 때 변수에 저장함
# 같은 데이터 형식을 저장할 때 변수에 저장하면?? 10개 저장할 경우 변수를 10개 선언
# 같은 데이터 형식이면 1개 변수로 모두 저장하면 어떨까? =>1차원 배열
# Python = 모든 데이터를 객체로 저장하기 때문에 같은 데이터가 아니어도 저장이 가능하다.

# 리스트 - 동적 배열 (1차원) : 배열은 자릿수가 있어야 사용 가능
# 배열 - 10개, 20개 사용하겠다. 라고 지정해야함
# Linked List 구조 : 자료구조 학문
# 사용하는 법을 배운다. [] 안에 요소 넣는다 (square bracket) -> 대괄호
# 다른 프로그램에서는 Index로 사용되는 기호
# 대괄호 안에 있는 데이터 : 요소 라는 이름으로 표시 (element)
# 변수명(리스트명) = [] <- 빈 리스트
# 변수명(리스트명) = [12,345,6,54,23,234,'홍길동'] <-데이터가 들어있는 리스트 

# 선언하고 데이터 사용 : 특정 데이터를 가져올 때 대괄호를 활용해서 가져옴 -> 인덱스로
# 인덱스(indexing) : 특정 위치의 데이터만 가져오겠다
# 컴퓨터 프로그램에서는 숫자의 시작은 0으로 시작 : 이진법
# 리스트의 특정 위치의 데이터를 가져올 때에는 몇 번째 위치인지 -1 을 이용해서 특정 데이터 가져옴
# range 범위의 시작, 끝을 사용할 수 있는데 시작이 0 이 아니면 마지막 숫자 즉 끝을
# 선언한 것은 생성하지 않고 리스트에서 -1 함
# range는 마지막 끝의 숫자는 생성하지 않음


data2 = [2,456,123,543,56,432,'홍길동']



resultData1 = data2[5]
#특정 위치의 데이터를 수정하고 싶은 때
data2[5] = '이름이 길동이냐?'
resultData1 = data2[5]

# range 활용해서 순차적으로 리스트를 만들 수 있다
#  : 연속된 숫자를 생성하는 기능(내장 클래스)
data3 = range(5) # 0 ~ 5 데이터를 순차적으로 저장 (0 ~ 4) 총 5개를 순차적으로 저장
data4 = data3[4]
# range는 마지막 끝의 숫자는 생성하지 않습니다.
# range 범위의 시작, 끝을 사용할 수 있는데 시작이 0 이 아니면 마지막 숫자 즉 끝을 
# 선언한 것은 생성하지 않고 리스트에서 -1 을 함
data5 = range(101, 110) # 10개를 만든 것 ?  101 ~ 109까지만 9개만 만듬(110 생성하지 않습니다.)
data6 = data5[0] #?
data7 = data5[8] # 10, 9, 8

# 실무에서는 조금 더 정확하게 list로 리터럴 형식을 지정해서 사용하는 방법을 권장
data8 = list(range(5)) # 리터럴 형식을 지정해서 저장하는 방법 - data8 = range(5)와 같다

# range에서 시작 , 끝, 증가하는 숫자(증가폭)
data9 = list(range(101, 111, 2))
data10 = list(range(10, 0, -1))

# 디거빙을 위한 임시 변수 선언
temp = 0

