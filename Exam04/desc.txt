Python 객체지향에서의 클래스 변수와 인스턴스 변수(책이나 다른 곳에서는 속성이라 함)
- 클래스는 변수 : 보안 코드를 작성할 때에는 클래스 메서드를 사용
- Python 에서는 클래스이름.클래스변수 호출해도 된다(권장)

class My1
    data1

result = My1()
result.data1 <- 다른 프로그램 또는 python에서 허용

My1.data1 <- Python에서 가능 : 개발자끼리는 이 방법을 더 선호한다.

Python 등의 최신 프로그램에서의 객체지향의 메모리와 메모리 정리
 - 가비지 수집기(윈도우의 조각모음) : 사용 신고만 하고 삭제 신고 하지 않음
    삭제 신고는 가비지 수집기가 직접 챙김 - 개발자가 접근 불가
    Python 자동으로 가비지 수집기를 함 : 그래서 개발자가 소멸자까지 하지 않음.
    __del__ 소멸자 : Python에서 C/C++ API 사용할 때 직접 소멸을 해야 하는 경우 사용
        - 보통은 래핑이 되서 하지 않아도 되지만, 가끔 직접 Python에서 소멸해야 할 경우 직접 한다.
    특별한 메서드 : Special Method(Magic Method)
            __del__ | 2개의 객체를 합치는 __add__ 기타 등등

 C++ 객체지향프로그램 언어 : 객체를 사용하면 신고하고, 모두 사용했으면 끝났다고 신고함
 생성자, 소멸자
    생성, 소멸 코드를 작성


3대 이론

1. 정보은닉
2. 상속
3. 다형

------------------------- 은닉
클래스 안에 있는 메서드와 변수를 권한이 있는 사람만 접근하는 것
    Public(누구나) , Private(나만) , Protected(상속 받은 클래스만 접근)
    : Python에서는 무조건 Public 기본
    메서드를 선언할 때 아무것도 없이 지금까지 배운것 처럼 하면 Public
    Private 메서드 이름, 클래스 변수, 인스턴수 변수앞에 __ 할 경우 Private
    인스턴스 변수를 이용해서 초기값 주는 방법 : 속성을 이용해서 초기값을 주는 방법
    Python 에서는 인스턴스 변수에 초기값을 주는 방법(attribute)

------------------------ 상속
 원본 클래스가 있고 이 원본 클래스에서 기능을 추가할 때 사용
    기본 클래스 - 부모 클래스
    파생 클래스 - 자식 클래스

인스턴스 할때 파생(자식) 클래스를 인스턴스 하면, 파생 클래스의 메서드 + 기본 클래스의 메서드를 모두 사용 가능

------------------------ 다형
원본 클래스와 자식 클래스가 있으면 메서드가 같은 것으로 자식 클래스가 메서드를 덮어 쓰는 것
    인스턴스 한 사람이 필요에 따라 선택해서 가져오는 것

